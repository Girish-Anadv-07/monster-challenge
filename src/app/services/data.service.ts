import { Injectable } from '@angular/core';
import { Observable, of, BehaviorSubject, interval } from 'rxjs';

export interface Timezone {
  name: string;
  iana: string;
  time?: string;
}

@Injectable({
  providedIn: 'root', // This makes the service globally available in the app
})
export class DataService {
  private timezones: Timezone[] = [
    { name: 'International Date Line West (UTC-12)', iana: 'Etc/GMT+12' },
    { name: 'Coordinated Universal Time-11 (UTC-11)', iana: 'Etc/GMT+11' },
    { name: 'Hawaii Standard Time (HST)', iana: 'Pacific/Honolulu' },
    { name: 'Alaska Standard Time (AKST)', iana: 'America/Anchorage' },
    { name: 'Pacific Time (US and Canada) (PST)', iana: 'America/Los_Angeles' },
    { name: 'Mountain Time (US and Canada) (MST)', iana: 'America/Denver' },
    { name: 'Central Time (US and Canada) (CST)', iana: 'America/Chicago' },
    { name: 'Eastern Time (US and Canada) (EST)', iana: 'America/New_York' },
    { name: 'Atlantic Time (Canada) (AT)', iana: 'America/Halifax' },
    { name: 'Newfoundland Standard Time (NST)', iana: 'America/St_Johns' },
    { name: 'Brasilia Time (BRT)', iana: 'America/Sao_Paulo' },
    { name: 'Mid-Atlantic Time (MAT)', iana: 'Atlantic/South_Georgia' },
    { name: 'Azores Time (AZOT)', iana: 'Atlantic/Azores' },
    { name: 'UTC (Greenwich Mean Time) (GMT)', iana: 'Etc/UTC' },
    { name: 'Central European Time (CET)', iana: 'Europe/Berlin' },
    { name: 'Eastern European Time (EET)', iana: 'Europe/Bucharest' },
    { name: 'Moscow Standard Time (MSK)', iana: 'Europe/Moscow' },
    { name: 'Iran Standard Time (IRST)', iana: 'Asia/Tehran' },
    { name: 'Gulf Standard Time (GST)', iana: 'Asia/Dubai' },
    { name: 'Afghanistan Time (AFT)', iana: 'Asia/Kabul' },
    { name: 'Pakistan Standard Time (PKT)', iana: 'Asia/Karachi' },
    { name: 'India Standard Time (IST)', iana: 'Asia/Kolkata' },
    { name: 'Nepal Time (NPT)', iana: 'Asia/Kathmandu' },
    { name: 'Bangladesh Standard Time (BST)', iana: 'Asia/Dhaka' },
    { name: 'Myanmar Time (MMT)', iana: 'Asia/Yangon' },
    { name: 'Indochina Time (ICT)', iana: 'Asia/Bangkok' },
    { name: 'China Standard Time (CST)', iana: 'Asia/Shanghai' },
    { name: 'Japan Standard Time (JST)', iana: 'Asia/Tokyo' },
    {
      name: 'Australian Eastern Standard Time (AEST)',
      iana: 'Australia/Sydney',
    },
    { name: 'Lord Howe Standard Time (LHST)', iana: 'Australia/Lord_Howe' },
    { name: 'Norfolk Island Time (NFT)', iana: 'Pacific/Norfolk' },
    { name: 'New Zealand Standard Time (NZST)', iana: 'Pacific/Auckland' },
    { name: 'Chatham Islands Time (CHAST)', iana: 'Pacific/Chatham' },
    { name: 'Tonga Time (TOT)', iana: 'Pacific/Tongatapu' },
    { name: 'Line Islands Time (LINT)', iana: 'Pacific/Kiritimati' },
  ];
  private airlines: string[] = [
    'Emirates',
    'Qatar Airways',
    'Delta Airlines',
    'Lufthansa',
    'United Airlines',
    'American Airlines',
    'British Airways',
    'Air France',
    'Singapore Airlines',
    'Turkish Airlines',
    'Cathay Pacific',
    'Etihad Airways',
    'Japan Airlines',
    'Swiss International Air Lines',
    'KLM Royal Dutch Airlines',
    'Air India',
    'Southwest Airlines',
    'Jet Airways',
    'Alaska Airlines',
    'Air Canada',
  ];

  airlineFlights: { [key: string]: string[] } = {
    Emirates: [
      'EK202',
      'EK450',
      'EK789',
      'EK321',
      'EK678',
      'EK101',
      'EK303',
      'EK404',
      'EK505',
      'EK606',
      'EK707',
      'EK808',
      'EK909',
      'EK010',
      'EK111',
      'EK122',
      'EK233',
      'EK344',
      'EK455',
      'EK566',
      'EK677',
      'EK788',
      'EK899',
      'EK1000',
      'EK1234',
      'EK5678',
      'EK9012',
      'EK3456',
      'EK7890',
    ],
    'Qatar Airways': [
      'QR123',
      'QR456',
      'QR789',
      'QR555',
      'QR999',
      'QR100',
      'QR101',
      'QR202',
      'QR303',
      'QR404',
      'QR505',
      'QR606',
      'QR707',
      'QR808',
      'QR909',
      'QR010',
      'QR111',
      'QR222',
      'QR333',
      'QR444',
      'QR666',
      'QR777',
      'QR888',
      'QR1100',
      'QR1200',
      'QR1300',
      'QR1400',
      'QR1500',
    ],
    'Delta Airlines': [
      'DL101',
      'DL404',
      'DL777',
      'DL900',
      'DL333',
      'DL555',
      'DL666',
      'DL888',
      'DL999',
      'DL1001',
      'DL1100',
      'DL1200',
      'DL1300',
      'DL1400',
      'DL1500',
      'DL1600',
      'DL1700',
      'DL1800',
      'DL1900',
      'DL2000',
      'DL2100',
      'DL2200',
      'DL2300',
      'DL2400',
      'DL2500',
      'DL2600',
      'DL2700',
      'DL2800',
      'DL2900',
    ],
    Lufthansa: [
      'LH555',
      'LH333',
      'LH888',
      'LH222',
      'LH999',
      'LH111',
      'LH444',
      'LH666',
      'LH777',
      'LH1000',
      'LH1100',
      'LH1200',
      'LH1300',
      'LH1400',
      'LH1500',
      'LH1600',
      'LH1700',
      'LH1800',
      'LH1900',
      'LH2000',
      'LH2100',
      'LH2200',
      'LH2300',
      'LH2400',
      'LH2500',
    ],
    'United Airlines': [
      'UA100',
      'UA200',
      'UA300',
      'UA400',
      'UA500',
      'UA600',
      'UA700',
      'UA800',
      'UA900',
      'UA1000',
      'UA1100',
      'UA1200',
      'UA1300',
      'UA1400',
      'UA1500',
      'UA1600',
      'UA1700',
      'UA1800',
      'UA1900',
      'UA2000',
      'UA2100',
      'UA2200',
      'UA2300',
      'UA2400',
      'UA2500',
      'UA2600',
      'UA2700',
      'UA2800',
      'UA2900',
      'UA3000',
    ],
    'American Airlines': [
      'AA001',
      'AA123',
      'AA456',
      'AA789',
      'AA999',
      'AA1001',
      'AA2001',
      'AA3001',
      'AA4001',
      'AA5001',
      'AA6001',
      'AA7001',
      'AA8001',
      'AA9001',
      'AA10000',
      'AA20000',
      'AA30000',
      'AA40000',
      'AA50000',
      'AA60000',
      'AA70000',
      'AA80000',
      'AA90000',
      'AA100000',
      'AA110000',
      'AA120000',
      'AA130000',
      'AA140000',
      'AA150000',
      'AA160000',
    ],
    'British Airways': [
      'BA100',
      'BA200',
      'BA300',
      'BA400',
      'BA500',
      'BA600',
      'BA700',
      'BA800',
      'BA900',
      'BA1000',
      'BA1100',
      'BA1200',
      'BA1300',
      'BA1400',
      'BA1500',
      'BA1600',
      'BA1700',
      'BA1800',
      'BA1900',
      'BA2000',
      'BA2100',
      'BA2200',
      'BA2300',
      'BA2400',
      'BA2500',
      'BA2600',
      'BA2700',
      'BA2800',
      'BA2900',
      'BA3000',
    ],
    'Air France': [
      'AF101',
      'AF202',
      'AF303',
      'AF404',
      'AF505',
      'AF606',
      'AF707',
      'AF808',
      'AF909',
      'AF1000',
      'AF1100',
      'AF1200',
      'AF1300',
      'AF1400',
      'AF1500',
      'AF1600',
      'AF1700',
      'AF1800',
      'AF1900',
      'AF2000',
      'AF2100',
      'AF2200',
      'AF2300',
      'AF2400',
      'AF2500',
      'AF2600',
      'AF2700',
      'AF2800',
      'AF2900',
      'AF3000',
    ],
    'Singapore Airlines': [
      'SQ777',
      'SQ888',
      'SQ999',
      'SQ123',
      'SQ234',
      'SQ345',
      'SQ456',
      'SQ567',
      'SQ678',
      'SQ789',
      'SQ890',
      'SQ901',
      'SQ012',
      'SQ1234',
      'SQ2345',
      'SQ3456',
      'SQ4567',
      'SQ5678',
      'SQ6789',
      'SQ7890',
      'SQ8901',
      'SQ9012',
      'SQ12345',
      'SQ23456',
      'SQ34567',
      'SQ45678',
      'SQ56789',
      'SQ67890',
      'SQ78901',
      'SQ89012',
    ],
    'Turkish Airlines': [
      'TK001',
      'TK002',
      'TK003',
      'TK004',
      'TK005',
      'TK006',
      'TK007',
      'TK008',
      'TK009',
      'TK010',
      'TK011',
      'TK012',
      'TK013',
      'TK014',
      'TK015',
      'TK016',
      'TK017',
      'TK018',
      'TK019',
      'TK020',
      'TK021',
      'TK022',
      'TK023',
      'TK024',
      'TK025',
      'TK026',
      'TK027',
      'TK028',
      'TK029',
      'TK030',
    ],
    'Cathay Pacific': [
      'CX111',
      'CX222',
      'CX333',
      'CX444',
      'CX555',
      'CX666',
      'CX777',
      'CX888',
      'CX999',
      'CX1000',
      'CX1100',
      'CX1200',
      'CX1300',
      'CX1400',
      'CX1500',
      'CX1600',
      'CX1700',
      'CX1800',
      'CX1900',
      'CX2000',
      'CX2100',
      'CX2200',
      'CX2300',
      'CX2400',
      'CX2500',
      'CX2600',
      'CX2700',
      'CX2800',
      'CX2900',
      'CX3000',
    ],
    'Etihad Airways': [
      'EY100',
      'EY200',
      'EY300',
      'EY400',
      'EY500',
      'EY600',
      'EY700',
      'EY800',
      'EY900',
      'EY1000',
      'EY1100',
      'EY1200',
      'EY1300',
      'EY1400',
      'EY1500',
      'EY1600',
      'EY1700',
      'EY1800',
      'EY1900',
      'EY2000',
      'EY2100',
      'EY2200',
      'EY2300',
      'EY2400',
      'EY2500',
      'EY2600',
      'EY2700',
      'EY2800',
      'EY2900',
      'EY3000',
    ],
    'Japan Airlines': [
      'JL101',
      'JL202',
      'JL303',
      'JL404',
      'JL505',
      'JL606',
      'JL707',
      'JL808',
      'JL909',
      'JL1000',
      'JL1100',
      'JL1200',
      'JL1300',
      'JL1400',
      'JL1500',
      'JL1600',
      'JL1700',
      'JL1800',
      'JL1900',
      'JL2000',
      'JL2100',
      'JL2200',
      'JL2300',
      'JL2400',
      'JL2500',
      'JL2600',
      'JL2700',
      'JL2800',
      'JL2900',
      'JL3000',
    ],
    'Swiss International Air Lines': [
      'LX100',
      'LX200',
      'LX300',
      'LX400',
      'LX500',
      'LX600',
      'LX700',
      'LX800',
      'LX900',
      'LX1000',
      'LX1100',
      'LX1200',
      'LX1300',
      'LX1400',
      'LX1500',
      'LX1600',
      'LX1700',
      'LX1800',
      'LX1900',
      'LX2000',
      'LX2100',
      'LX2200',
      'LX2300',
      'LX2400',
      'LX2500',
      'LX2600',
      'LX2700',
      'LX2800',
      'LX2900',
      'LX3000',
    ],
    'KLM Royal Dutch Airlines': [
      'KL001',
      'KL002',
      'KL003',
      'KL004',
      'KL005',
      'KL006',
      'KL007',
      'KL008',
      'KL009',
      'KL010',
      'KL011',
      'KL012',
      'KL013',
      'KL014',
      'KL015',
      'KL016',
      'KL017',
      'KL018',
      'KL019',
      'KL020',
      'KL021',
      'KL022',
      'KL023',
      'KL024',
      'KL025',
      'KL026',
      'KL027',
      'KL028',
      'KL029',
      'KL030',
    ],
    'Air India': [
      'AI101',
      'AI202',
      'AI303',
      'AI404',
      'AI505',
      'AI606',
      'AI707',
      'AI808',
      'AI909',
      'AI1000',
      'AI1100',
      'AI1200',
      'AI1300',
      'AI1400',
      'AI1500',
      'AI1600',
      'AI1700',
      'AI1800',
      'AI1900',
      'AI2000',
      'AI2100',
      'AI2200',
      'AI2300',
      'AI2400',
      'AI2500',
      'AI2600',
      'AI2700',
      'AI2800',
      'AI2900',
      'AI3000',
    ],
  };

  private timezonesSubject = new BehaviorSubject<Timezone[]>(
    this.updateTimes()
  );

  constructor() {
    this.syncToNextMinute();
  }

  getTimezones(): Observable<Timezone[]> {
    return this.timezonesSubject.asObservable();
  }

  private updateTimes(): Timezone[] {
    return this.timezones.map((tz) => ({
      ...tz,
      time: this.getFormattedTime(tz.iana),
    }));
  }

  private syncToNextMinute() {
    this.timezonesSubject.next(this.updateTimes());

    const now = new Date();
    const millisecondsUntilNextMinute = (60 - now.getSeconds()) * 1000;

    setTimeout(() => {
      this.timezonesSubject.next(this.updateTimes());
      interval(60000).subscribe(() => {
        this.timezonesSubject.next(this.updateTimes());
      });
    }, millisecondsUntilNextMinute);
  }

  private getFormattedTime(timeZone: string): string {
    return new Date().toLocaleTimeString('en-US', {
      timeZone,
      hour: '2-digit',
      minute: '2-digit',
      hour12: true,
    });
  }

  getIanaFromTimezoneName(name: string): string | undefined {
    const match = this.timezones.find((tz) => tz.name === name);
    return match?.iana;
  }

  getAirlines(): Observable<string[]> {
    return of(this.airlines);
  }

  getFlightsForAirline(airline: string): Observable<string[]> {
    return of(this.airlineFlights[airline] || []);
  }
}
